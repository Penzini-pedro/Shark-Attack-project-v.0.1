{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6e0b2309",
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.simplefilter(action='ignore', category=FutureWarning)\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "import datetime\n",
    "pd.set_option(\"display.max_rows\", None)\n",
    "df_sucio = pd.read_csv(r'C:\\Users\\penzi\\projectos\\Shark-Attack-project-v.0.1\\DATASET-CSV\\attacks.csv', sep= ',', encoding='latin1')\n",
    "\n",
    "df_limpiando= df_sucio.copy()#creo una dataframe sin los rows nulos para poder limpiar y despues unirlo con los row que no necesito \n",
    "\n",
    "df_limpiando= df_limpiando.dropna(axis=0, how='all')#drop fillas nulas que despue svamos a join\n",
    "df_limpiando= df_limpiando.drop(df_limpiando.index[6302:]) #mas facil era agarrar el range i drop que buscar los indice aunque lo pudiera hacer asi\n",
    "\n",
    "\n",
    "#aca ya empiezas a limpiar la data \n",
    "df_limpiando.rename(columns={'Species ': 'Species'}, inplace=True)#renombrar columnas\n",
    "df_limpiando['Species']= df_limpiando['Species'].fillna('shark')#change null in colum for shark\n",
    "#asi vemos que contiene la columna para editar para Species /ODIO REGEX VIVA HARDCODING\n",
    "df_limpiando.replace(['shark involvement prior to death was not confirmed', 'Said to involve a grey nurse shark that leapt out of the water and  seized the boy but Species identification is questionable', 'Shark involvement prior to death unconfirmed'], ['Shark involvement not confirmed', 'Shark involvement not confirmed', 'Shark involvement not confirmed'], inplace=True)\n",
    "#ME DIO FASTIDIO VAMOS A APRENDER REGEX\n",
    "#Limpiar columna case number\n",
    "df_limpiando.rename(columns={'Case Number': 'Case_Number'}, inplace=True)\n",
    "df_limpiando.rename(columns={'Case Number.1': 'Case_Number_1'}, inplace=True)\n",
    "df_limpiando.rename(columns={'Case Number.2': 'Case_Number_2'}, inplace=True) #cambio columna name para hacer la limpieza mas rapid solo quita la fecha\n",
    "\n",
    "df_limpiando.Case_Number=df_limpiando.Case_Number_1\n",
    "\n",
    "\n",
    "#Limpiamos date\n",
    "#print(type(df_limpiando.Date[1]))#primero veo que tipo de data es la fecha que es un str ahora iteramos y ponemos los strings en date format\n",
    "def cell_Date(a,b):\n",
    "    df_limpiando.Date=df_limpiando.Date.str.replace(a ,b)\n",
    "\n",
    "cell_Date('^Rep[o]?rt[e]?d\\s','' )\n",
    "cell_Date('Reported?', '')\n",
    "cell_Date('^\\s*', '')\n",
    "cell_Date('$\\w*', '')\n",
    "cell_Date('^(Circa|Ca|Before|Early|Late|Fall|[Ss]ummer)[\\s]?', '')\n",
    "cell_Date('Between','-')\n",
    "cell_Date('$Reported','')\n",
    "cell_Date('.', '-')\n",
    "cell_Date('^-\\s', '')\n",
    "cell_Date('World War II', '1935-1945')\n",
    "cell_Date('--','-')\n",
    "cell_Date('190Feb-2010', '19-Feb-2010')\n",
    "cell_Date('No date,\\s','')\n",
    "cell_Date('^\\s*', '')\n",
    "cell_Date('$-*','')\n",
    "cell_Date('?','')\n",
    "\n",
    "pd.to_datetime(df_limpiando['Date'],errors='ignore', format= \"%d/%m/%Y\")\n",
    "\n",
    "#Limpiar year column convertir float to int y si quieres aplicar un date \n",
    "# cambio filla nan o 0.0 por un numero que pueda leer como int luego cambio a numericos y al final formateo para formato a√±o\n",
    "df_limpiando['Year'] = df_limpiando['Year'].fillna(0.0)\n",
    "df_limpiando['Year'] = df_limpiando['Year'].replace(0.0, 1)\n",
    "df_limpiando['Year'] = pd.to_numeric(df_limpiando['Year'], errors='ignore')\n",
    "df_limpiando['Year'] = df_limpiando['Year'].apply(np.int64)\n",
    "df_limpiando.loc[(df_limpiando.Year == 1),'Year']=df_limpiando['Date']#ojo que con esto puedes rellenar la info de una columna con otra\n",
    "df_limpiando['Year']= pd.to_datetime(df_limpiando['Year'],errors='ignore', format= \"/%Y\")\n",
    "\n",
    "\n",
    "\n",
    "#limpiando type\n",
    "#vamos los valores que contiene\n",
    "#print(df_limpiando['Type'].value_counts())\n",
    "#creamos una funcion para corregir los valores en la serie\n",
    "df_limpiando['Type']= df_limpiando['Type'].fillna('Invalid')\n",
    "def cell_Type(a,b):\n",
    "    df_limpiando.Type=df_limpiando.Type.str.replace(a ,b)\n",
    "cell_Type('Questionable', 'Invalid') \n",
    "cell_Type('Sea Disaster', 'Unprovoked')\n",
    "cell_Type('Boating', 'Provoked' )\n",
    "cell_Type('Boatomg', 'Provoked')\n",
    "cell_Type('Boat', 'Provoked')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Limpiamos Country\n",
    "\n",
    "df_limpiando['Country']= df_limpiando['Country'].fillna('x')\n",
    "#df_limpiando['Country']= df_limpiando.loc[(df_limpiando.Country == 'x'),'Country']=df_limpiando['Area']\n",
    "df_limpiando['Country']= df_limpiando['Country'].str.upper()\n",
    "def cell_Country(a,b):\n",
    "    df_limpiando.Country= df_limpiando.Country.str.replace(a ,b)\n",
    "df_limpiando['Country']= df_limpiando['Country'].str.strip()\n",
    "cell_Country('\\?*','')\n",
    "\n",
    "#print(df_limpiando['Country'].value_counts())\n",
    "\n",
    "#Limpiamos area\n",
    "df_limpiando['Area']= df_limpiando['Area'].fillna('X')\n",
    "#df_limpiando['Area']= df_limpiando.loc[(df_limpiando.Country == 'x'),'Area']=df_limpiando['Country']\n",
    "\n",
    "#Limpiamos Location\n",
    "\n",
    "df_limpiando['Location']= df_limpiando['Location'].str.strip()\n",
    "def cell_Location(a,b):\n",
    "    df_limpiando.Location= df_limpiando.Location.str.replace(a ,b)\n",
    "cell_Location(\"[^a-zA-Z0-9\\s]\", \"\",)\n",
    "\n",
    "\n",
    "#limpiamos Activity\n",
    "df_limpiando['Activity']= df_limpiando['Activity'].fillna('x')\n",
    "df_limpiando['Activity']= df_limpiando['Activity'].str.strip()\n",
    "def cell_Activity(a,b):\n",
    "    df_limpiando.Activity= df_limpiando.Activity.str.replace(a ,b)\n",
    "cell_Activity(\"[^a-zA-Z0-9\\s]\", \"\",)\n",
    "df_limpiando['Activity']= df_limpiando['Activity'].fillna('Unkown')\n",
    "df_limpiando['Activity']= df_limpiando['Activity'].astype(str)\n",
    "\n",
    "df_limpiando['Activity']= df_limpiando['Activity'].str.upper()\n",
    "\n",
    "#limpiamos sex primero porque nombre contiene info importante\n",
    "df_limpiando.rename(columns = {'Sex ':'Sex'}, inplace = True)\n",
    "df_limpiando.where(df_limpiando['Name']== '[male*]', df_limpiando['Sex']== 'M', axis=0) \n",
    "df_limpiando.where(df_limpiando['Name']== '[female*]', df_limpiando['Sex']== 'M', axis=0) \n",
    "df_limpiando['Sex']= df_limpiando['Sex'].fillna('U')\n",
    "\n",
    "\n",
    "#limpiamos Name\n",
    "df_limpiando['Name']= df_limpiando['Name'].fillna('Unkown')\n",
    "df_limpiando['Name']= df_limpiando['Name'].str.strip()\n",
    "def cell_Name(a,b):\n",
    "    df_limpiando['Name']= df_limpiando['Name'].str.replace(a ,b)\n",
    "cell_Name(\"[^a-zA-Z0-9\\s]\", \"\",)\n",
    "cell_Name('$male|$female', '')\n",
    "cell_Name('(male|female)', 'Unkown')\n",
    "df_limpiando['Country']= df_limpiando['Country'].str.upper()\n",
    "\n",
    "#Limpiamos Age\n",
    "def cell_Age(a,b):\n",
    "    df_limpiando['Age']= df_limpiando['Age'].str.replace(a ,b)\n",
    "cell_Age('[^0-9]', '')\n",
    "df_limpiando['Age']= df_limpiando['Age'].fillna('Unkown')\n",
    "\n",
    "#Limpiamos Injury \n",
    "df_limpiando['Injury']= df_limpiando['Injury'].fillna('UNKNOWN')\n",
    "\n",
    "#Limpiamos Fatal (Y/N)\n",
    "df_limpiando.rename(columns = {'Fatal (Y/N)':'Fatal'}, inplace = True)\n",
    "df_limpiando['Fatal']= df_limpiando['Fatal'].str.strip()\n",
    "df_limpiando['Fatal']= df_limpiando['Fatal'].astype(str)\n",
    "\n",
    "df_limpiando.where(df_limpiando['Injury']== '[Fatal]', df_limpiando['Fatal']== 'Y', axis=0) \n",
    "df_limpiando.where(df_limpiando['Injury']== '[Fatal]', df_limpiando['Fatal']== 'N', axis=0) \n",
    "df_limpiando['Fatal']= df_limpiando['Fatal'].str.upper()\n",
    "df_limpiando['Fatal']= df_limpiando['Fatal'].replace('M', 'UNKNOWN')\n",
    "df_limpiando['Fatal']= df_limpiando['Fatal'].replace('2017', 'UNKNOWN')\n",
    "df_limpiando['Fatal']= df_limpiando['Fatal'].fillna('UNKNOWN')\n",
    "df_limpiando['Fatal']= df_limpiando['Fatal'].replace('NAN', 'U')\n",
    "df_limpiando['Fatal']= df_limpiando['Fatal'].replace('UNKNOWN', 'U')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#Limpiamos Time\n",
    "df_limpiando['Time']= df_limpiando['Time'].str.strip()\n",
    "df_limpiando['Time']= df_limpiando['Time'].fillna('Unkown')\n",
    "df_limpiando['Time']= df_limpiando['Time'].replace('nan', 'Unkown')\n",
    "df_limpiando['Time']= pd.to_timedelta(df_limpiando['Time'], errors='ignore')\n",
    "#df_limpiando['Time']= df_limpiando['Time'].replace('(DUSK|NOON|LATE AFTERNOON|MORNING|MIDDAY|NIGHT)', '')\n",
    "#df_limpiando['Time']= df_limpiando['Time'].replace('DUSK', '')\n",
    "\n",
    "#Limpiamos Species\n",
    "def cell_Species(a,b):\n",
    "    df_limpiando.Species=df_limpiando.Species.str.replace(a ,b)\n",
    "cell_Species('shark   probably a blacktip or spinner shark', 'spinner shark') \n",
    "cell_Species('\\d+', '') #quitamos numeros /s quita espacios\n",
    "cell_Species(\"\\W\", '') #quitamos no alphanumericos\n",
    "cell_Species('[m]', '')\n",
    "cell_Species('$m', '') #quitamos solo la primera si aparece en este caso m\n",
    "cell_Species(\"Invalid\", \"Shark involvement not confirmed\")\n",
    "cell_Species(\"to   shark\", 'Shark')\n",
    "cell_Species(\"whiteshark\", \"White shark\")\n",
    "cell_Species(\"Shark involvement prior to death was not confirmed\", \"Shark involvement not confirmed\")\n",
    "cell_Species('$tofeet', '')\n",
    "cell_Species('^to', '')\n",
    "cell_Species('$to', '')\n",
    "cell_Species('^Possiblya', '')\n",
    "cell_Species('Sharkinvolvementnotconfirmed', 'Shark involvement not confirmed')\n",
    "cell_Species('Whitesharkm', 'Whiteshark' )\n",
    "cell_Species('Sharkinvolvementpriortodeathwasnotconfirmed', 'Shark involvement not confirmed')\n",
    "cell_Species('Questionable', 'Shark involvement not confirmed')\n",
    "#print(df_limpiando['Species'].value_counts())#esto me ayuda a ver como van la row de la columna si quiere limpiar quita #\n",
    "df_limpiando['original order']= df_limpiando['original order'].astype(int)\n",
    "\n",
    "\n",
    "df_limpiando.to_csv(r\"C:\\Users\\penzi\\projectos\\Shark-Attack-project-v.0.1\\DATASET-CSV\\CLeaned_df.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2ea228a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
